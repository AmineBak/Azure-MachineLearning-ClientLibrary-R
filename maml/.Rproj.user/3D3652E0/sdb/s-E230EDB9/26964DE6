{
    "contents" : "#####################################################################################################\n# TITANIC DEMO\n#####################################################################################################\n\n# IMPORTANT: need to compile all of consume, discover, publish functions before running this demo\n\nsetwd(\"C://Users/t-alewa/Documents/Azure-MachineLearning-ClientLibrary-R/demo\")\n#setwd(\"C://Users/t-ritra/Documents/Github/Azure-MachineLearning-ClientLibrary-R/demo\")\n#setwd(\"C://Users/t-brger/Documents/Github/Azure-MachineLearning-ClientLibrary-R/demo\")\n\n\n# test server\nwsID = \"bbc91d900c3546b695d6507867fc72ae\"\nwsAuth = \"ffc4b8d52c494e9eb42726b77112be88\"\n\n# internal server\nwsID = \"3612640f27234eb7b2b91ac62e8b4a40\"\nwsAuth = \"abcbe14a958a40978f93aa0e0e71f5be\"\n\n#\ntest <- read.csv(file=\"test.csv\")\ntrain <- read.csv(file=\"train.csv\")\n\nhead(test)\nhead(train)\n\n#y variable\nsurvived <- train$Survived\n\n#id\npassengerId <- test$PassengerId\n\n#remove from the training sample\ntrain = train[,-2]\n\nend_trn = nrow(train)\n\n#combine the two sets\ntrain <- rbind(train, test)\n#Age replace with mean\ntrain$Age[is.na(train$Age)] <- 30\nend = nrow(train)\n\n#remove columns\ntrain = train[,c(-1,-3,-8,-10,-11)]\nhead(train)\n\nlibrary(gbm)\nset.seed(123)\npr=0\ntr=0\n\nn.models = 5\nntrees=2000\n\n# train a generalized boosted regression model\nfor(i in 1:n.models){\n  GBM.model = gbm.fit(\n    x=train[1:end_trn,], y = survived,\n    distribution= \"gaussian\",\n    n.trees = ntrees,\n    shrinkage = 0.01,\n    interaction.depth = 25,\n    n.minobsinnode = 5,\n    verbose = TRUE)\n  #test set prediction\n  pr1 = predict.gbm(object=GBM.model,newdata=train[(end_trn+1):end,], ntrees)\n  #training set prediction\n  tr1 = predict.gbm(object = GBM.model,newdata=train[1:end_trn,], ntrees)\n  pr = pr+pr1\n  tr = tr+tr1\n}\npr = pr/n.models\ntr = tr/n.models\nhead(pr)\nhead(tr)\nsummary(GBM.model)\n\npr = round(pr)\ntr = round(tr)\n\n# create a function to make predictions using the trained model\npredictTitanic <- function (Pclass, Sex, Age, SibSp, Parch, Fare) {\n  return(predict.gbm(object=GBM.model, newdata=data.frame(\"Pclass\"=Pclass, \"Sex\"=Sex, \"Age\"=Age, \"SibSp\"=SibSp, \"Parch\"=Parch, \"Fare\"=Fare), 2000))\n}\n\n# Sample local call\npredictTitanic(1, \"male\", 20, 2, 0, 8.50)\n\n\n\n# Publish the function\n# Go to https://metaanalytics001.cloudapp.net/Home/ViewWorkspace/bbc91d900c3546b695d6507867fc72ae?#Workspace/WebServiceGroups/listWebServiceGroups\n# to see published function\nTitanicService <- publishWebService(\"predictTitanic\", \"IMMLTitanicDemo\", list(\"Pclass\"=\"string\", \"Sex\"=\"string\", \"Age\"=\"int\", \"SibSp\"=\"int\", \"Parch\"=\"int\", \"Fare\"=\"float\"), list(\"survProb\"=\"float\"), wsID, wsAuth)\n# Currently response is a list of two things:\n#   new web service details, default endpoint details (using discovery functions)\n\n\n\n# Discover the endpoints\n# Go to help page\nendpoints <- getEndpoints(wsID, wsAuth, TitanicService[[1]][\"Id\"], internalURL)\n# Alternatively,\nendpoints <- TitanicService[[2]]\n\n\n\n# Consume the new webservice\n# First, consume with inputs as a list\n# Slow initially as it makes the connection\nresponse <- consumeDataTable(endpoints[[1]][\"PrimaryKey\"], paste(endpoints[[1]][\"ApiLocation\"], \"/execute?api-version=2.0&details=true\",sep=\"\"), list(\"Pclass\", \"Sex\", \"Age\", \"SibSp\", \"Parch\", \"Fare\"), list(1, \"male\", 20, 2, 0, 8.50), list(1, \"female\", 20, 1, 0, 8.50))\n# Subsequent calls are faster as connection is left open\nresponse2 <- consumeDataTable(endpoints[[1]][\"PrimaryKey\"], paste(endpoints[[1]][\"ApiLocation\"], \"/execute?api-version=2.0&details=true\",sep=\"\"), list(\"Pclass\", \"Sex\", \"Age\", \"SibSp\", \"Parch\", \"Fare\"), list(2, \"male\", 50, 1, 0, 8.50), list(2, \"female\", 50, 1, 0, 8.50))\n\n# consume with inputs as dataframe\n# creating test data.frame\ndemoDF <- data.frame(\"Pclass\"=c(1,2,1), \"Sex\"=c(\"male\",\"female\",\"male\"), \"Age\"=c(8,20, 30), \"Parch\"=c(1,1,1), \"SibSp\"=c(1,3,1), \"Fare\"=c(10,7.5, 9))\nresponseDF <- consumeDataframe(TitanicService[[2]][[1]]$PrimaryKey, paste(TitanicService[[2]][[1]]$ApiLocation,\"/execute?api-version=2.0&details=true\",sep=\"\"), demoDF)\n",
    "created" : 1437604248392.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "649945542",
    "id" : "26964DE6",
    "lastKnownWriteTime" : 1437605716,
    "path" : "~/GitHub/Azure-MachineLearning-ClientLibrary-R/demo/demo.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}