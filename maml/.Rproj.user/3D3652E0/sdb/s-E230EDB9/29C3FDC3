{
    "contents" : "library(rjson)\n\n################################################################\n# Serialization/DeSerialization\n# jsonlite needs to be installed:\n#     install.packages(jsonlite)\n################################################################\n\n#Define global variables for serialization\ninputDF <<- data.frame()\noutputDF <<- data.frame()\npublishedFunction <<- getFunctionString\n\n\n\n#############################################################\n#' @title Serialize the input\n#' @description Create a serialized dataFrame with the input arguments\n#'\n#' Expecting:\n#'    inputSchema = list(\"arg1\"=\"type\", \"arg2\"=\"type\", ...)\n#' @param list Take arguments of a function in type list\n#' @return serialized input expectations\n#############################################################\nserializeI <- function(input) {\n  #convert input to vectors to be added to dataframe\n  inArgs <<- unlist(input)\n  inputDF <<- data.frame(inArgs)\n\n  #serialize data\n  sArgs = jsonlite::serializeJSON(inArgs)\n\n  return(sArgs)\n}\n\n\n\n#############################################################\n#' @title Serialize the output\n#' @description Serialize the output DataFrame\n#' @param list Take arguments of a function in type list\n#' Expecting:\n#'    outputSchema = list(\"output1\"=\"type\", \"output2\"=\"type\", ...)\n#' @return serialized output expectations\n#############################################################\nserializeO <- function(output) {\n  #convert output to vectors to be added to dataframe\n  outArgs <<- unlist(output)\n  outputDF <<- data.frame(outArgs)\n\n  #serialize data\n  oArgs <- jsonlite::serializeJSON(outArgs)\n  return (oArgs)\n}\n\n\n\n#############################################################\n#' @title Serialize the Body of a Function\n#' @description Change function to accept a dataframe\n#' @param string function name to serialize\n#' @return output (fromJSON)\n#############################################################\nserializeFunc <- function(publishedFunction) {\n  # serialize body of function\n  bodyFunction <- body(publishedFunction)\n\n  return (jsonlite::serializeJSON(bodyFunction))\n}\n\n\n\n#############################################################\n#' @title Serialize (Published) User Arguments\n#' @description Take Output from function and save into output dataframe\n#' Expect arguments from user in a dataframe\n#' @param dataframe Pass dataframe into function\n#' @return serialized output\n#############################################################\nserializeMeta <- function(userDF, funcName) {\n  # convert back to params\n  args <- as.list(userDF[,])\n\n  #run function\n  output <- do.call(funcName, args)\n  print(output)\n  returnDF <- data.frame(output)\n\n  #serialize output\n  oArgs = jsonlite::serializeJSON(returnDF)\n  return (oArgs)\n}\n\n\n\n#############################################################\n#' @title Serialize (Published) Output\n#' @description This is an internal function\n#' Take Output from function and save into output dataframe\n#' @param dataframe Pass dataframe back to user\n#' @return output dataframe\n#############################################################\nunserializeMeta <- function(output) {\n  # convert back to params\n  outputDF <<- jsonlite::unserializeJSON(output)\n  outlist <- as.list(outputDF[,])\n\n  print(outlist)\n  return (outlist)\n}\n",
    "created" : 1437517541246.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1588170022",
    "id" : "29C3FDC3",
    "lastKnownWriteTime" : 1437607217,
    "path" : "~/GitHub/Azure-MachineLearning-ClientLibrary-R/maml/R/serialize.R",
    "project_path" : "R/serialize.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}