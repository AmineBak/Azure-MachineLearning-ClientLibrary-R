{
    "contents" : "consumeURL = \"https://requestresponse001.cloudapp.net/workspaces/bbc91d900c3546b695d6507867fc72ae/services/5cab01b0918c42acb3d32bf597f320f5/execute?api-version=2.0&details=true\"\napiKey = \"iuB4GWUkRhhXWqa5dhSXJ/hmC9PHfvuyRvP9yb5RJM/F62Bz8wqpGOXpjEB9gQHko02D3J1MHxMhu3j0pHHWcA==\"\n\n# Ritika's function\nconsumeSingleRequest <- function(api_key, URL, columnNames, ...) {\n  # Accept SSL certificates issued by public Certificate Authorities\n  values = output_list <- lapply(X=list(...), function(x) x)\n\n  options(RCurlOptions = list(cainfo = system.file(\"CurlSSL\", \"cacert.pem\", package = \"RCurl\")))\n\n  h = basicTextGatherer()\n  hdr = basicHeaderGatherer()\n\n  req = list(\n    Inputs = list(\n      input1 = list(\n        ColumnNames = columnNames,\n        Values = values\n      )\n    )\n  )\n\n  body = enc2utf8(toJSON(req))\n  print(body)\n  print(api_key)\n  authz_hdr = paste('Bearer', api_key, sep=' ')\n  h$reset()\n  curlPerform(url = URL,\n              httpheader=c('Content-Type' = \"application/json\", 'Authorization' = authz_hdr),\n              postfields=body,\n              writefunction = h$update,\n              headerfunction = hdr$update,\n              verbose = TRUE,\n              ssl.verifypeer = FALSE,\n              ssl.verifyhost = FALSE\n  )\n\n  headers = hdr$value()\n  httpStatus = headers[\"status\"]\n  if (httpStatus >= 400)\n  {\n    print(paste(\"The request failed with status code:\", httpStatus, sep=\" \"))\n\n    # Print the headers - they include the request ID and the timestamp, which are useful for debugging the failure\n    print(\"headers:\")\n    print(headers)\n  }\n\n  result = fromJSON(h$value())\n  return(result)\n}\n\n# Default arguments for demoing\ndefaultUrl = \"https://ussouthcentral.services.azureml.net/workspaces/1bbf481194404066a2ee4998a1da2c43/services/da7952281c630641a9bd1a9b1571f65d/score\"\ndefaultKey = \"PAhtatK4xlaDB5G3hnDcEwuuYM45GafP3cSdY1PHBBIEQcUW3Ze9fUtYWy4wpbNy5foWGZIMs8FTG/a0EfOzSQ==\"\ndefaultParams = list(\n  Id=\"score00001\",\n  Instance=list(\n    FeatureVector = list(\n      \"c1\" = \"4\")\n    ,\n    GlobalParameters = RJSONIO::fromJSON('{}')\n  ))\n\n#' Make a call to an API with arguments\n#'\n#' @param serviceUrl The url of the web app\n#' @param key The API key\n#' @param toScore the parameters\n#' @return The call to the web service at \\code{serviceUrl} with arguments \\code{toScore}\n#' @examples\n#' nKey = \"JlSp5W+RWf2boTHLwvOvW32j/dDI8d/+ghCb8HTZHKYBl+QkZE46w+ZAxTAdo6U1lXfR6G2SBgnK3/i3VznSww==\"\n#' nUrl = \"https://ussouthcentral.services.azureml.net/workspaces/c01fb89129aa4ef0a19affa7f95ecbbc/services/dadb2d2e626b4e06981dfc6b2b960ebb/execute?api-version=2.0&details=true\"\n#' nParams = list(\n#'   Inputs = list(\n#'    \"input1\" = list(\n#'      \"ColumnNames\" = list(\"Column 0\", \"Class\", \"Sex\", \"Age\", \"Freq\"),\n#'      \"Values\" = list( list( \"0\", \"value\", \"value\", \"value\", \"0\" ),  list( \"0\", \"value\", \"value\", \"value\", \"0\" )  )\n#'    )                ),\n#'  GlobalParameters = fromJSON('{}')\n#')\n#' predictService(url, key, params)\npredictService <- function(serviceUrl=defaultUrl, key=defaultKey, toScore=defaultParams) {\n\n  # Accept SSL certificates issued by public Certificate Authorities\n  options(RCurlOptions = list(cainfo = system.file(\"CurlSSL\", \"cacert.pem\", package = \"RCurl\")))\n\n  h = RCurl::basicTextGatherer()\n  hdr = RCurl::basicTextGatherer()\n\n  body = RJSONIO::toJSON(toScore)\n  api_key = key\n  #api_key = \"PAhtatK4xlaDB5G3hnDcEwuuYM45GafP3cSdY1PHBBIEQcUW3Ze9fUtYWy4wpbNy5foWGZIMs8FTG/a0EfOzSQ==\" # Replace this with the API key for the web service\n  authz_hdr = paste('Bearer', api_key, sep=' ')\n\n  h$reset()\n  RCurl::curlPerform(url = serviceUrl,\n              httpheader=c('Content-Type' = \"application/json\", 'Authorization' = authz_hdr),\n              postfields=body,\n              writefunction = h$update,\n              headerfunction = hdr$update,\n              verbose = TRUE\n  )\n\n  # TODO: prettify results?\n  print(\"Result:\")\n  result = h$value()\n  print(RJSONIO::fromJSON(result))\n}\n",
    "created" : 1432933848494.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "471733564",
    "id" : "8337EBA6",
    "lastKnownWriteTime" : 1435787800,
    "path" : "~/Azure-MachineLearning-ClientLibrary-R/maml/R/consume.R",
    "project_path" : "R/consume.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}