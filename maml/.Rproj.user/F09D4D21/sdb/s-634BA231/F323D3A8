{
    "contents" : "[library(\"RCurl\")\nlibrary(\"rjson\")\nlibrary(\"data.table\")\nlibrary(\"df2json\")\n\n\n#' This function takes in an API key, file name and the request URL (OData Endpoint Address).\n#' It scores the experiment with the data in the file, and sends it to the server in the appropriate format.\n#' It then obtains a response from Azure Machine Learning Studio and returns a response to the user. It returns the output columns along with the scored probablities!\n#' @param api key must be entered as the first paramter, and must be a string\n#' @param file name must be entered as the second paramter, and must be a string\n#' @param URL must be entered as the third paramter, and must be a string\n#' @return results in a list of lists, with the scored probability at the end of each list\n\nconsumeFile <- function(api_key, fileName, URL) {\n  dataFrame = read.csv(fileName,check.names=FALSE)\n  columnNames = colnames(dataFrame)\n  foo <- as.matrix(dataFrame)\n  rownames(foo) <- NULL\n  colnames(foo) <- NULL\n  foo <- lapply(seq_len(nrow(foo)), function(row) foo[row,])\n  values = foo\n\n  options(RCurlOptions = list(cainfo = system.file(\"CurlSSL\", \"cacert.pem\", package = \"RCurl\")))\n  h = basicTextGatherer()\n  hdr = basicHeaderGatherer()\n\n  req = list(\n    Inputs = list(\n      input1 = list(\n        ColumnNames = columnNames,\n        Values = values\n      )\n    )\n  )\n\n  body = enc2utf8(toJSON(req))\n  authz_hdr = paste('Bearer', api_key, sep=' ')\n  h$reset()\n  curlPerform(url = URL,\n              httpheader=c('Content-Type' = \"application/json\", 'Authorization' = authz_hdr),\n              postfields=body,\n              writefunction = h$update,\n              headerfunction = hdr$update,\n              verbose = TRUE\n  )\n\n  headers = hdr$value()\n  httpStatus = headers[\"status\"]\n  if (httpStatus >= 400)\n  {\n    print(paste(\"The request failed with status code:\", httpStatus, sep=\" \"))\n\n    # Print the headers - they include the request ID and the timestamp, which are useful for debugging the failure\n    print(\"headers:\")\n    print(headers)\n  }\n\n  print(\"Result:\")\n  result = h$value()\n  print(result)\n  return result\n\n}\n\n#' This function takes in an API key, the request URL (OData Endpoint Address), the column names and multiple requests\n#' It scores the experiment with the requests stored in a list of lists, and sends it to the server in the appropriate format.\n#' It then obtains a response from Azure Machine Learning Studio and returns a response to the user. It returns the output column(s) along with the scored probablities!\n#' @param api_key must be entered as the first paramter, and must be a string\n#' @param URL must be entered as the second paramter, and must be a string\n#' @param columnNames must be entered as the third parameter and as a list\n#' @param ... each parameter must be a request which is in the format of a separate list that contains a row of values corresponsing to the column names provided\n#' @return results in a list of lists, with the scored probability at the end of each list\n\nconsumeSingleRequest <- function(api_key, URL, columnNames, ...) {\n  # Accept SSL certificates issued by public Certificate Authorities\n  values = output_list <- lapply(X=list(...), function(x) x)\n\n  options(RCurlOptions = list(cainfo = system.file(\"CurlSSL\", \"cacert.pem\", package = \"RCurl\")))\n\n  h = basicTextGatherer()\n  hdr = basicHeaderGatherer()\n\n  req = list(\n    Inputs = list(\n      input1 = list(\n        ColumnNames = columnNames,\n        Values = values\n      )\n    )\n  )\n\n  body = enc2utf8(toJSON(req))\n  print(body)\n  print(api_key)\n  authz_hdr = paste('Bearer', api_key, sep=' ')\n  h$reset()\n  curlPerform(url = URL,\n              httpheader=c('Content-Type' = \"application/json\", 'Authorization' = authz_hdr),\n              postfields=body,\n              writefunction = h$update,\n              headerfunction = hdr$update,\n              verbose = TRUE\n  )\n\n  headers = hdr$value()\n  httpStatus = headers[\"status\"]\n  if (httpStatus >= 400)\n  {\n    print(paste(\"The request failed with status code:\", httpStatus, sep=\" \"))\n\n    # Print the headers - they include the request ID and the timestamp, which are useful for debugging the failure\n    print(\"headers:\")\n    print(headers)\n  }\n\n  print(\"Result:\")\n  result = h$value()\n  print(result)\n  return result\n}\n\n",
    "created" : 1434394253461.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1892429506",
    "id" : "F323D3A8",
    "lastKnownWriteTime" : 1435020462,
    "path" : "C:/Users/t-alewa/Downloads/consumeRRS.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "type" : "r_source"
}