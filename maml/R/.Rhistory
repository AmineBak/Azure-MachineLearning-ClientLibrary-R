available.packages*()
available.packages()
packs <- available.packages()
packs["rjson", "Depends"]
packs["RCurl", "Depends"]
??methods
library(methods)
?bitops
library(bitops)
??bitops
packs["bgm", "Depends"]
packs["jsonlite", "Depends"]
packs["smappR", "Depends"]
packs["randomForest", "Depends"]
typeof(packs["randomForest", "Depends"])
as.list(packs["randomForest", "Depends"])
strsplit(packs["randomForest", "Depends"], split=",")
strsplit(packs["randomForest", "Depends"], split=", ")
library(codetools)
?findGlobals
a <- (5 + b)
b <- list(5,1)
a <- 5 + b[[1]]
rm(list=ls())
grep(R[:space:]\(>=[:space:] *\), "R (>= 2.5.0)")
grep("R[:space:]\(>=[:space:] *\)", "R (>= 2.5.0)")
grep("R[:space:](>=[:space:] *)", "R (>= 2.5.0)")
grep("R[:space:](>=[:space:] \*)", "R (>= 2.5.0)")
grep("R[:space:](>=[:space:] \\\*)", "R (>= 2.5.0)")
grep("R[:space:]()", "R (>= 2.5.0)")
grep("R", "R (>= 2.5.0)")
grep("R ()", "R (>= 2.5.0)")
grep("R ()", "R [>= 2.5.0]")
grep("R \\(\\*\\)", "R [>= 2.5.0]")
grep("R \\(\\*\\)", "R (>= 2.5.0)")
grep("R \\(\\.*\\)", "R (>= 2.5.0)")
grep("R \\((.*)\\)", "R (>= 2.5.0)")
grep("R \\((.*)\\)", "R [>= 2.5.0]")
grep("R \\((.*)\\)", "S (>= 2.5.0)")
grep("R \\((.*)\\)", "R (>= 2.6.0)")
1 & TRUE
0 & TRUE
integer(0) & TRUE
grep("R \\((.*)\\)", "R (>= 2.6.0)") & TRUE
recurPkg <- function(pkgName, pkgList) {
# if the package isn't already in the list
if (pkgName !%in% pkgList) {
# add it
pkgList <- c(pkgName, pkgList)
# iterate through the dependencies and check if need to add them
for (pkg in strsplit(available.packages()[pkgName, "Depends"], split=", ")) {
# filter out duplicates and R version dependencies
if (pkg !%in% packages & !grep("R \\((.*)\\)", pkg)) {
# recursively call recurPkg
pkgList <- recurPkg(pkg, pkgList)
}
}
# return updated pkgList
return(pkgList)
}
recurPkg <- function(pkgName, pkgList) {
# if the package isn't already in the list
if (pkgName !%in% pkgList) {
# add it
pkgList <- c(pkgName, pkgList)
# iterate through the dependencies and check if need to add them
for (pkg in strsplit(available.packages()[pkgName, "Depends"], split=", ")) {
# filter out duplicates and R version dependencies
if (pkg !%in% packages & !grep("R \\((.*)\\)", pkg)) {
# recursively call recurPkg
pkgList <- recurPkg(pkg, pkgList)
}
}
}
# return updated pkgList
return(pkgList)
}
recurPkg <- function(pkgName, pkgList) {
# if the package isn't already in the list
if (pkgName !%in% pkgList) {
# add it
pkgList <- c(pkgName, pkgList)
pkgDeps <- available.packages()
# iterate through the dependencies and check if need to add them
for (pkg in strsplit(pkgDeps[pkgName, "Depends"], split=", ")) {
# filter out duplicates and R version dependencies
if (pkg !%in% packages & !grep("R \\((.*)\\)", pkg)) {
# recursively call recurPkg
pkgList <- recurPkg(pkg, pkgList)
}
}
}
# return updated pkgList
return(pkgList)
}
recurPkg <- function(pkgName, pkgList) {
# if the package isn't already in the list
if (pkgName !%in% pkgList) {
# add it
pkgList <- c(pkgName, pkgList)
pkgDeps <- available.packages()
# iterate through the dependencies and check if need to add them
for (pkg in strsplit(pkgDeps[pkgName, "Depends"], split=", ")) {
# filter out duplicates and R version dependencies
if (pkg !%in% packages & !grep("R \\((.*)\\)", pkg)) {
# recursively call recurPkg
pkgList <- recurPkg(pkg, pkgList)
}
}
}
# return updated pkgList
return(pkgList)
}
recurPkg <- function(pkgName, pkgList) {
# if the package isn't already in the list
if (pkgName %!in% pkgList) {
# add it
pkgList <- c(pkgName, pkgList)
pkgDeps <- available.packages()
# iterate through the dependencies and check if need to add them
for (pkg in strsplit(pkgDeps[pkgName, "Depends"], split=", ")) {
# filter out duplicates and R version dependencies
if (pkg %!in% packages & !grep("R \\((.*)\\)", pkg)) {
# recursively call recurPkg
pkgList <- recurPkg(pkg, pkgList)
}
}
}
# return updated pkgList
return(pkgList)
}
recurPkg("RCurl")
recurPkg("Rcurl")
recurPkg <- function(pkgName, pkgList) {
# if the package isn't already in the list
if (!(pkgName %in% pkgList)) {
# add it
pkgList <- c(pkgName, pkgList)
pkgDeps <- available.packages()
# iterate through the dependencies and check if need to add them
for (pkg in strsplit(pkgDeps[pkgName, "Depends"], split=", ")) {
# filter out duplicates and R version dependencies
if (!(pkg %in% packages) & !grep("R \\((.*)\\)", pkg)) {
# recursively call recurPkg
pkgList <- recurPkg(pkg, pkgList)
}
}
}
# return updated pkgList
return(pkgList)
}
recurPkg("RCurl")
recurPkg("RCurl", list())
recurPkg <- function(pkgName, pkgList) {
# if the package isn't already in the list
if (!(pkgName %in% pkgList)) {
# add it
pkgList <- c(pkgName, pkgList)
pkgDeps <- available.packages()
# iterate through the dependencies and check if need to add them
for (pkg in strsplit(pkgDeps[pkgName, "Depends"], split=", ")) {
# filter out duplicates and R version dependencies
if (!(pkg %in% pkgList) & !grep("R \\((.*)\\)", pkg)) {
# recursively call recurPkg
pkgList <- recurPkg(pkg, pkgList)
}
}
}
# return updated pkgList
return(pkgList)
}
recurPkg("RCurl", list())
available.packages()["RCurl", "Depends"]
available.packages()["methods", "Depends"]
available.packages()["bitops", "Depends"]
available.packages()["jsonlite", "Depends"]
package.dependencies("Rcurl")
library(tools)
package.dependencies("RCurl")
package.dependencies(RCurl)
pkgDepends("Rcurl")
pkgDepends("RCurl")
library(RCurl)
