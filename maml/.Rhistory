rjson::fromJSON(h$value())
}
publishWebService("add", "addDirTest2", list("icol"="int"), list("ocol"="int"), wsID, auth)
packDependencies <- function(funName) {
dependencies = list()
packages = list()
# generate a GUID to act as a file name to store packages, R data
guid = gsub("-", "", uuid::UUIDgenerate(use.time=TRUE))
# NOTE: will not work if the user function specifies the names directly, e.g. won't find rjson::toJSON
# from findGlobals man page: "R semantics only allow variables that might be local to be identified"
# CONSIDER: how robust is this filtering? need to verify
for (obj in codetools::findGlobals(get(funName))) {
name = get(obj)
# filter out primitives
if (is.primitive(name)) {
next
}
# get objects
else if (!is.function(name)) {
dependencies[[obj]] <- name
}
# grab user defined functions
else if (identical(environment(name), globalenv())) {
dependencies[[obj]] <- name
}
# get the names of packages of package functions
else if (paste(getNamespaceName(environment(name))) != "base") {
packages[[obj]] <- getNamespaceName(environment(name))
}
# need an else branch?
}
# save current path to restore to later
start = getwd()
# go to package library, doing this to prevent tarballing entire path to package
# TODO: what if packages are in different library directories? need to iterate through all paths
setwd(.libPaths()[[1]])
# pack up each package in its own tarball (tz)
for (pkg in packages) {
# should error handle, e.g. if can't find package
tar(paste(start, paste(pkg, "tar", sep="."), sep="/"), pkg)
}
# go back to where the user started
setwd(start)
# list of things to include in .zip
toZip = vector()
# gunzip stuff (gz)
for (pkg in packages) {
R.utils::gzip(paste(pkg, "tar", sep="."), destname=paste(pkg, "tar", "gz", sep="."), overwrite=TRUE)
toZip <- c(toZip, paste(pkg, "tar", "gz", sep="."))
}
# objects, functions, etc.
if (length(dependencies) > 0) {
# maybe can save directly as a .zip and skip the zip() call?
save(dependencies, file=guid)
toZip <- c(toZip, guid)
}
# zip up everything
if (length(toZip) > 0) {
zip(zipfile=guid, files=toZip)
zipEnc <- base64enc::base64encode(paste(guid, ".zip", sep=""))
# delete the packages
for (pkg in packages) {
# did I miss anything? maybe extra files floating around
file.remove(paste(pkg, "tar", "gz", sep="."))
}
# delete the dependency rdta file
file.remove(guid)
file.remove(paste(guid,"zip",sep="."))
# return the encoded zip as a string
return(list(guid, zipEnc))
}
# if nothing was zipped, return false
else {
return(list(guid, FALSE))
}
}
publishWebService("add", "addDirTest2", list("icol"="int"), list("ocol"="int"), wsID, auth)
getEndpointsT(wsID, auth, "dd4f870e1eb511e585f6f7c524a6c099")
consumeSingleRequest("47/OUfP4QOuFiF0nSqxqurYwdjlTAt3yi2iC+xIRHPMxESBEsBHE+NfCoVzUskMTabQip5o/pBBSoenO87je8g==", "https://requestresponse001.cloudapp.net/workspaces/bbc91d900c3546b695d6507867fc72ae/services/f7417f9aa6af433dba7ec00326896237/execute?api-version=2.0&details=true", "icol", 1)
install.packages(paste("R", "codetools.tar.gz", sep="/"), repos=NULL, type="source")
list.files(R)
list.files("R"
)
install.packages(paste("R", "lasso2.tar.gz", sep="/"), repos=NULL, type="source")
install.packages(paste("R", "codetools_0.2-11.tar.gz", sep="/"), repos=NULL, type="source")
.libPaths()
.libPaths()[[1]]
install.packages("codetools")
?install.packages
test <- "codetools"
install.packages(test)
installed.packages9)
installed.packages()
"jsonlite" %in% installed.packages()
"jsonlite" %in% installed.packages()[,"Package"]
file %in% installed.packages()[,"Package"]
file
test
test %in% installed.packages()[,"Package"]
install.packages(paste("R", "codetools", sep="/"), repos=NULL)
install.packages(paste("R", "codetools.zip", sep="/"), repos=NULL)
install.packages(paste("R", "codetools.zip", sep="/"), repos=NULL, type="win.binary")
install.packages(paste("R", "codetools", sep="/"), repos=NULL, type="win.binary")
library(tools)
package.dependencies(codetools)
package.dependencies(test)
package.dependencies("codetools")
package.dependencies(matrix("codetools"))
available.packages()
?available.packages()
installed.packages()
head(installed.packages)
head(installed.packages())
?package.dependencies()
?available.packages()
base64enc::base64encode("codetools.zip")
tZip <- ""
da
dagaag
agd
f
)
""
""
tZip <- base64enc::base64encode("codetools.zip")
codetools::findGlobals(a)
codetools::findGlobals(add)
getFunctionString(add)
getFunctionString(sum)
data.frame(codetools::findGlobals)
data.frame(codetools::findGlobals(sum))
data.frame(codetools::findGlobals(findGlobals))
data.frame(codetools::findGlobals(codetools::findGlobals))
publishWebService <- function(funName, serviceName, inputSchema, outputSchema, wkID, authToken) {
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
# Get and encode the dependencies
zipString = packDependencies(funName)
# Build the body of the request, differing on whether or not there is a zip to upload
# Probably a more elegant way to do this
if (zipString[[2]] == FALSE) {
req = list(
"Name" = serviceName,
"Type" = "Code",
"CodeBundle" = list(
"InputSchema" = convert(inputSchema),
"OutputSchema" = convert(outputSchema),
"Language" = "r-3.1-64",
"SourceCode" = sprintf(wrapper, length(outputSchema), zipString[[1]], zipString[[1]], paste(getFunctionString(funName)))
)
)
}
else {
req = list(
"Name" = serviceName,
"Type" = "Code",
"CodeBundle" = list(
"InputSchema" = format(inputSchema),
"OutputSchema" = format(outputSchema),
"Language" = "r-3.1-64",
#        "SourceCode" = sprintf(wrapper, length(outputSchema), zipString[[1]], zipString[[1]], paste(getFunctionString(funName))),
"SourceCode" = "inputDF <- maml.mapInputPort(1)\r\ninstall.packages(paste(\"src\", \"codetools.zip\", sep=\"/\"), repos=NULL, type=\"win.binary\")\r\nlibrary(\"codetools\")\r\noutputDF <- data.frame(findGlobals(findGlobals))\r\nmaml.mapOutputPort(\"outputDF\")",
"ZipContents" = tZip # zipString
)
)
}
# convert the payload to JSON as expected by API
# TODO: consolidate json packages, i.e. use only one if possible
body = RJSONIO::toJSON(req)
# Response gatherer
h = RCurl::basicTextGatherer()
h$reset()
# Generate unique guid
guid = gsub("-", "", uuid::UUIDgenerate(use.time=TRUE))
# API call
RCurl::httpPUT(url = sprintf(publishURL, wkID, guid), # defined above
httpheader=c('Authorization' = paste('Bearer', authToken, sep=' '),
'Content-Type' = 'application/json',
'Accept' = 'application/json'),
content = body,
writefunction = h$update,
ssl.verifyhost = FALSE) ### REMOVE THIS FOR THE REAL VERSION ###
# return everything
# TODO: format output
rjson::fromJSON(h$value())
}
publishWebService("test", "testPkg", list("icol1"="int"), list("ocol1"="int"), wsID, auth)
publishWebService("add", "testPkg", list("icol1"="int"), list("ocol1"="int"), wsID, auth)
library(codetools)
publishWebService("add", "testPkg", list("icol1"="int"), list("ocol1"="int"), wsID, auth)
getEndpointsT(wsID, auth, "4789e2ac1f7111e591b6b7512c5213b0")
consumeSingleRequest("yH9Af+w2UQ79HNxNlqE2J4e8t9tYzi4lzJhEJWJNhfh33k+MvvPtnJ1g3mRf7GfQQLSFeOXBcZyrFHqU70SgMQ==", "https://requestresponse001.cloudapp.net/workspaces/bbc91d900c3546b695d6507867fc72ae/services/ca307b628a234718833e52f43dc027c5/execute?api-version=2.0&details=true", list("icol1"), 1)
library(RCurl)
consumeSingleRequest("yH9Af+w2UQ79HNxNlqE2J4e8t9tYzi4lzJhEJWJNhfh33k+MvvPtnJ1g3mRf7GfQQLSFeOXBcZyrFHqU70SgMQ==", "https://requestresponse001.cloudapp.net/workspaces/bbc91d900c3546b695d6507867fc72ae/services/ca307b628a234718833e52f43dc027c5/execute?api-version=2.0&details=true", list("icol1"), 1)
library(rjson)
consumeSingleRequest("yH9Af+w2UQ79HNxNlqE2J4e8t9tYzi4lzJhEJWJNhfh33k+MvvPtnJ1g3mRf7GfQQLSFeOXBcZyrFHqU70SgMQ==", "https://requestresponse001.cloudapp.net/workspaces/bbc91d900c3546b695d6507867fc72ae/services/ca307b628a234718833e52f43dc027c5/execute?api-version=2.0&details=true", list("icol1"), 1)
consumeSingleRequest("yH9Af+w2UQ79HNxNlqE2J4e8t9tYzi4lzJhEJWJNhfh33k+MvvPtnJ1g3mRf7GfQQLSFeOXBcZyrFHqU70SgMQ==", "https://requestresponse001.cloudapp.net/workspaces/bbc91d900c3546b695d6507867fc72ae/services/ca307b628a234718833e52f43dc027c5/execute?api-version=2.0&details=true", list("icol1"), "1")
consumeSingleRequest("yH9Af+w2UQ79HNxNlqE2J4e8t9tYzi4lzJhEJWJNhfh33k+MvvPtnJ1g3mRf7GfQQLSFeOXBcZyrFHqU70SgMQ==", "https://requestresponse001.cloudapp.net/workspaces/bbc91d900c3546b695d6507867fc72ae/services/ca307b628a234718833e52f43dc027c5/execute?api-version=2.0&details=true", list("icol1"), list(1))
install.packages(paste("R", "codetools", sep="/"), repos=NULL, type="binary")
publishWebService <- function(funName, serviceName, inputSchema, outputSchema, wkID, authToken) {
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
# Get and encode the dependencies
zipString = packDependencies(funName)
# Build the body of the request, differing on whether or not there is a zip to upload
# Probably a more elegant way to do this
if (zipString[[2]] == FALSE) {
req = list(
"Name" = serviceName,
"Type" = "Code",
"CodeBundle" = list(
"InputSchema" = convert(inputSchema),
"OutputSchema" = convert(outputSchema),
"Language" = "r-3.1-64",
"SourceCode" = sprintf(wrapper, length(outputSchema), zipString[[1]], zipString[[1]], paste(getFunctionString(funName)))
)
)
}
else {
req = list(
"Name" = serviceName,
"Type" = "Code",
"CodeBundle" = list(
"InputSchema" = format(inputSchema),
"OutputSchema" = format(outputSchema),
"Language" = "r-3.1-64",
#        "SourceCode" = sprintf(wrapper, length(outputSchema), zipString[[1]], zipString[[1]], paste(getFunctionString(funName))),
"SourceCode" = "inputDF <- maml.mapInputPort(1)\r\ninstall.packages(paste(\"src\", \"codetools.zip\", sep=\"/\"), repos=NULL, type=\"binary\")\r\nlibrary(\"codetools\")\r\noutputDF <- data.frame(findGlobals(findGlobals))\r\nmaml.mapOutputPort(\"outputDF\")",
"ZipContents" = tZip # zipString
)
)
}
# convert the payload to JSON as expected by API
# TODO: consolidate json packages, i.e. use only one if possible
print(req)
body = RJSONIO::toJSON(req)
# Response gatherer
h = RCurl::basicTextGatherer()
h$reset()
# Generate unique guid
guid = gsub("-", "", uuid::UUIDgenerate(use.time=TRUE))
# API call
RCurl::httpPUT(url = sprintf(publishURL, wkID, guid), # defined above
httpheader=c('Authorization' = paste('Bearer', authToken, sep=' '),
'Content-Type' = 'application/json',
'Accept' = 'application/json'),
content = body,
writefunction = h$update,
ssl.verifyhost = FALSE) ### REMOVE THIS FOR THE REAL VERSION ###
# return everything
# TODO: format output
rjson::fromJSON(h$value())
}
publishWebService("add", "testPkg2", list("icol1"="int"), list("ocol1"="int"), wsID, auth)
getEndpointsT(wsID, auth, "ff7446f01f7111e591b6b7512c5213b0")
consumeSingleRequest("VIopvraWHRgOXBwOjHCHS7qYYOoCiOlNittKwAWvRbDPVKCapJXeRXs7VY75jW3FbK2E4T1KKL4D2HCC0CUA7A==", "https://requestresponse001.cloudapp.net/workspaces/bbc91d900c3546b695d6507867fc72ae/services/43211a80745d4e6ca4250f6bd930df24/execute?api-version=2.0&details=true", list("icol1"), list(1))
publishWebService <- function(funName, serviceName, inputSchema, outputSchema, wkID, authToken) {
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
# Get and encode the dependencies
zipString = packDependencies(funName)
# Build the body of the request, differing on whether or not there is a zip to upload
# Probably a more elegant way to do this
if (zipString[[2]] == FALSE) {
req = list(
"Name" = serviceName,
"Type" = "Code",
"CodeBundle" = list(
"InputSchema" = convert(inputSchema),
"OutputSchema" = convert(outputSchema),
"Language" = "r-3.1-64",
"SourceCode" = sprintf(wrapper, length(outputSchema), zipString[[1]], zipString[[1]], paste(getFunctionString(funName)))
)
)
}
else {
req = list(
"Name" = serviceName,
"Type" = "Code",
"CodeBundle" = list(
"InputSchema" = format(inputSchema),
"OutputSchema" = format(outputSchema),
"Language" = "r-3.1-64",
#        "SourceCode" = sprintf(wrapper, length(outputSchema), zipString[[1]], zipString[[1]], paste(getFunctionString(funName))),
"SourceCode" = "inputDF <- maml.mapInputPort(1)\r\ninstall.packages(paste(\"src\", \"codetools.zip\", sep=\"/\"), lib = \".\", repos=NULL)\r\nlibrary(\"codetools\")\r\noutputDF <- data.frame(findGlobals(findGlobals))\r\nmaml.mapOutputPort(\"outputDF\")",
"ZipContents" = tZip # zipString
)
)
}
# convert the payload to JSON as expected by API
# TODO: consolidate json packages, i.e. use only one if possible
print(req)
body = RJSONIO::toJSON(req)
# Response gatherer
h = RCurl::basicTextGatherer()
h$reset()
# Generate unique guid
guid = gsub("-", "", uuid::UUIDgenerate(use.time=TRUE))
# API call
RCurl::httpPUT(url = sprintf(publishURL, wkID, guid), # defined above
httpheader=c('Authorization' = paste('Bearer', authToken, sep=' '),
'Content-Type' = 'application/json',
'Accept' = 'application/json'),
content = body,
writefunction = h$update,
ssl.verifyhost = FALSE) ### REMOVE THIS FOR THE REAL VERSION ###
# return everything
# TODO: format output
rjson::fromJSON(h$value())
}
testing <- publishWebService("add", "testPkg3", list("icol1"="int"), list("ocol1"="int"), wsID, auth)
testing
testing["Id"]
endpoint <- getEndpointsT(wsID, auth, testing["Id"])
endpoint
endpoints[[1]]["PrimaryKey"]
consumeSingleRequest(endpoint[[1]]["PrimaryKey"], paste(endpoint[[1]]["ApiLocation"],"/execute?api-version=2.0&details=true",sep=""), list("icol1"), list(1))
base64enc::base64encode("codetools.zip")
list.files()
list.files("R")
add
publishWebService <- function(funName, serviceName, inputSchema, outputSchema, wkID, authToken) {
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
# Get and encode the dependencies
zipString = packDependencies(funName)
# Build the body of the request, differing on whether or not there is a zip to upload
# Probably a more elegant way to do this
if (zipString[[2]] == FALSE) {
req = list(
"Name" = serviceName,
"Type" = "Code",
"CodeBundle" = list(
"InputSchema" = convert(inputSchema),
"OutputSchema" = convert(outputSchema),
"Language" = "r-3.1-64",
"SourceCode" = sprintf(wrapper, length(outputSchema), zipString[[1]], zipString[[1]], paste(getFunctionString(funName)))
)
)
}
else {
req = list(
"Name" = serviceName,
"Type" = "Code",
"CodeBundle" = list(
"InputSchema" = format(inputSchema),
"OutputSchema" = format(outputSchema),
"Language" = "r-3.1-64",
#        "SourceCode" = sprintf(wrapper, length(outputSchema), zipString[[1]], zipString[[1]], paste(getFunctionString(funName))),
#        "SourceCode" = "inputDF <- maml.mapInputPort(1)\r\ninstall.packages(paste(\"src\", \"codetools.zip\", sep=\"/\"), lib = \".\", repos=NULL)\r\nlibrary(\"codetools\")\r\noutputDF <- data.frame(findGlobals(findGlobals))\r\nmaml.mapOutputPort(\"outputDF\")",
#        "SourceCode" = "inputDF <- maml.mapInputPort(1)\r\noutputDF <- data.frame(list.files(\"src\")\r\nmaml.mapOutputPort(\"outputDF\")",
"ZipContents" = tZip # zipString
)
)
}
# convert the payload to JSON as expected by API
# TODO: consolidate json packages, i.e. use only one if possible
print(req)
body = RJSONIO::toJSON(req)
# Response gatherer
h = RCurl::basicTextGatherer()
h$reset()
# Generate unique guid
guid = gsub("-", "", uuid::UUIDgenerate(use.time=TRUE))
# API call
RCurl::httpPUT(url = sprintf(publishURL, wkID, guid), # defined above
httpheader=c('Authorization' = paste('Bearer', authToken, sep=' '),
'Content-Type' = 'application/json',
'Accept' = 'application/json'),
content = body,
writefunction = h$update,
ssl.verifyhost = FALSE) ### REMOVE THIS FOR THE REAL VERSION ###
# return everything
# TODO: format output
rjson::fromJSON(h$value())
}
testing <- publishWebService("add", "testPkg4", list("icol1"="int"), list("ocol1"="int"), wsID, auth)
endpoint <- getEndpointsT(wsID, auth, testing["Id"])
consumeSingleRequest(endpoint[[1]]["PrimaryKey"], paste(endpoint[[1]]["ApiLocation"],"/execute?api-version=2.0&details=true",sep=""), list("icol1"), list(1))
consumeSingleRequest(endpoint[[1]]["PrimaryKey"], paste(endpoint[[1]]["ApiLocation"],"/execute?api-version=2.0&details=true",sep=""), list("icol1"), list(1))
paste(endpoint[[1]]["ApiLocation"],"/execute?api-version=2.0&details=true",sep="")
endpoint[[1]]["ApiLocation"]
endpoint
testing["Id"]
testing
publishWebService <- function(funName, serviceName, inputSchema, outputSchema, wkID, authToken) {
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
# Get and encode the dependencies
zipString = packDependencies(funName)
# Build the body of the request, differing on whether or not there is a zip to upload
# Probably a more elegant way to do this
if (zipString[[2]] == FALSE) {
req = list(
"Name" = serviceName,
"Type" = "Code",
"CodeBundle" = list(
"InputSchema" = convert(inputSchema),
"OutputSchema" = convert(outputSchema),
"Language" = "r-3.1-64",
"SourceCode" = sprintf(wrapper, length(outputSchema), zipString[[1]], zipString[[1]], paste(getFunctionString(funName)))
)
)
}
else {
req = list(
"Name" = serviceName,
"Type" = "Code",
"CodeBundle" = list(
"InputSchema" = format(inputSchema),
"OutputSchema" = format(outputSchema),
"Language" = "r-3.1-64",
#        "SourceCode" = sprintf(wrapper, length(outputSchema), zipString[[1]], zipString[[1]], paste(getFunctionString(funName))),
#        "SourceCode" = "inputDF <- maml.mapInputPort(1)\r\ninstall.packages(paste(\"src\", \"codetools.zip\", sep=\"/\"), lib = \".\", repos=NULL)\r\nlibrary(\"codetools\")\r\noutputDF <- data.frame(findGlobals(findGlobals))\r\nmaml.mapOutputPort(\"outputDF\")",
"SourceCode" = "inputDF <- maml.mapInputPort(1)\r\noutputDF <- data.frame(list.files(\"src\")\r\nmaml.mapOutputPort(\"outputDF\")",
"ZipContents" = tZip # zipString
)
)
}
# convert the payload to JSON as expected by API
# TODO: consolidate json packages, i.e. use only one if possible
print(req)
body = RJSONIO::toJSON(req)
# Response gatherer
h = RCurl::basicTextGatherer()
h$reset()
# Generate unique guid
guid = gsub("-", "", uuid::UUIDgenerate(use.time=TRUE))
# API call
RCurl::httpPUT(url = sprintf(publishURL, wkID, guid), # defined above
httpheader=c('Authorization' = paste('Bearer', authToken, sep=' '),
'Content-Type' = 'application/json',
'Accept' = 'application/json'),
content = body,
writefunction = h$update,
ssl.verifyhost = FALSE) ### REMOVE THIS FOR THE REAL VERSION ###
# return everything
# TODO: format output
rjson::fromJSON(h$value())
}
testing <- publishWebService("add", "testPkg4", list("icol1"="int"), list("ocol1"="int"), wsID, auth)
endpoint <- getEndpointsT(wsID, auth, testing["Id"])
consumeSingleRequest(endpoint[[1]]["PrimaryKey"], paste(endpoint[[1]]["ApiLocation"],"/execute?api-version=2.0&details=true",sep=""), list("icol1"), list(1))
endpoint[[1]]["ApiLocation"]
paste(endpoint[[1]]["ApiLocation"],"/execute?api-version=2.0&details=true",sep="")
endpoints[[1]]["PrimaryKey"]
consumeSingleRequest(endpoint[[1]]["PrimaryKey"], paste(endpoint[[1]]["ApiLocation"],"/execute?api-version=2.0&details=true",sep=""), list("icol1"), list(1))
consumeSingleRequest(endpoint[[1]]["PrimaryKey"], paste(endpoint[[1]]["ApiLocation"],"/execute?api-version=2.0&details=true",sep=""), list("icol1"), list(1))
testing <- publishWebService("add", "testPkg5", list("icol1"="int"), list("ocol1"="int"), wsID, auth)
endpoint <- getEndpointsT(wsID, auth, testing["Id"])
consumeSingleRequest(endpoint[[1]]["PrimaryKey"], paste(endpoint[[1]]["ApiLocation"],"/execute?api-version=2.0&details=true",sep=""), list("icol1"), list(1))
consumeSingleRequest(endpoint[[1]]["PrimaryKey"], paste(endpoint[[1]]["ApiLocation"],"/execute?api-version=2.0&details=true",sep=""), list("icol1"), list(1))
tZip <- base64enc::base64encode("codetools.zip.zip")
publishWebService <- function(funName, serviceName, inputSchema, outputSchema, wkID, authToken) {
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
# Get and encode the dependencies
zipString = packDependencies(funName)
# Build the body of the request, differing on whether or not there is a zip to upload
# Probably a more elegant way to do this
if (zipString[[2]] == FALSE) {
req = list(
"Name" = serviceName,
"Type" = "Code",
"CodeBundle" = list(
"InputSchema" = convert(inputSchema),
"OutputSchema" = convert(outputSchema),
"Language" = "r-3.1-64",
"SourceCode" = sprintf(wrapper, length(outputSchema), zipString[[1]], zipString[[1]], paste(getFunctionString(funName)))
)
)
}
else {
req = list(
"Name" = serviceName,
"Type" = "Code",
"CodeBundle" = list(
"InputSchema" = format(inputSchema),
"OutputSchema" = format(outputSchema),
"Language" = "r-3.1-64",
#        "SourceCode" = sprintf(wrapper, length(outputSchema), zipString[[1]], zipString[[1]], paste(getFunctionString(funName))),
"SourceCode" = "inputDF <- maml.mapInputPort(1)\r\ninstall.packages(paste(\"src\", \"codetools.zip\", sep=\"/\"), lib = \".\", repos=NULL)\r\nlibrary(\"codetools\")\r\noutputDF <- data.frame(findGlobals(findGlobals))\r\nmaml.mapOutputPort(\"outputDF\")",
#        "SourceCode" = "inputDF <- maml.mapInputPort(1)\r\noutputDF <- data.frame(list.files(\"src\")\r\nmaml.mapOutputPort(\"outputDF\")",
"ZipContents" = tZip # zipString
)
)
}
# convert the payload to JSON as expected by API
# TODO: consolidate json packages, i.e. use only one if possible
print(req)
body = RJSONIO::toJSON(req)
# Response gatherer
h = RCurl::basicTextGatherer()
h$reset()
# Generate unique guid
guid = gsub("-", "", uuid::UUIDgenerate(use.time=TRUE))
# API call
RCurl::httpPUT(url = sprintf(publishURL, wkID, guid), # defined above
httpheader=c('Authorization' = paste('Bearer', authToken, sep=' '),
'Content-Type' = 'application/json',
'Accept' = 'application/json'),
content = body,
writefunction = h$update,
ssl.verifyhost = FALSE) ### REMOVE THIS FOR THE REAL VERSION ###
# return everything
# TODO: format output
rjson::fromJSON(h$value())
}
testing <- publishWebService("add", "testPkg5", list("icol1"="int"), list("ocol1"="int"), wsID, auth)
endpoint <- getEndpointsT(wsID, auth, testing["Id"])
consumeSingleRequest(endpoint[[1]]["PrimaryKey"], paste(endpoint[[1]]["ApiLocation"],"/execute?api-version=2.0&details=true",sep=""), list("icol1"), list(1))
consumeSingleRequest(endpoint[[1]]["PrimaryKey"], paste(endpoint[[1]]["ApiLocation"],"/execute?api-version=2.0&details=true",sep=""), list("icol1"), list(1))
