#' @return List of webservice details, default endpoint details, and the consumption function
#' @examples
#' # create a function to make predictions using the trained model
#' I.e. predictTitanic <- function (Pclass, Sex, Age, SibSp, Parch, Fare)
#' # Sample local call
#' predictTitanic(1, "male", 20, 2, 0, 8.50)
#' # Publish the function
#' TitanicService <- publishWebService("predictTitanic", "TitanicDemo", list("Pclass"="string", "Sex"="string", "Age"="int", "SibSp"="int", "Parch"="int", "Fare"="float"), list("survProb"="float"), wsID, wsAuth)
#' # Let's say that predictTitanic was changed and we want to republish
#' TitanicService <- updateWebService("predictTitanic", "TitanicDemo", list("Pclass"="string", "Sex"="string", "Age"="int", "SibSp"="int", "Parch"="int", "Fare"="float"), list("survProb"="float"), wsID, wsAuth)
#############################################################
updateWebService <- function(functionName, wsID, inputSchema, outputSchema, wkID, authToken) {
# Make sure schema inputted matches function signature
paramCheck(inputSchema, functionName)
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
# Get and encode the dependencies
zipString = packDependencies(functionName)
# Build the body of the request, differing on whether or not there is a zip to upload
if (zipString[[2]] == "") {
req = list(
"Name" = serviceName,
"Type" = "Code",
"CodeBundle" = list(
"InputSchema" = convert(inputSchema),
"OutputSchema" = convert(inputSchema),
"Language" = "r-3.1-64",
"SourceCode" = sprintf(wrapper, length(outputSchema), paste(sprintf("\"%s\"", names(outputSchema)), collapse=","), zipString[[1]], zipString[[1]], paste(getFunctionString(functionName)))
)
)
}
else {
req = list(
"Name" = serviceName,
"Type" = "Code",
"CodeBundle" = list(
"InputSchema" = convert(inputSchema),
"OutputSchema" = convert(outputSchema),
"Language" = "r-3.1-64",
"SourceCode" = sprintf(wrapper, length(outputSchema), paste(sprintf("\"%s\"", names(outputSchema)), collapse=","), zipString[[1]], zipString[[1]], paste(getFunctionString(functionName))),
"ZipContents" = zipString[[2]]
)
)
}
# convert the payload to JSON as expected by API
# TODO: consolidate json packages, i.e. use only one if possible
body = RJSONIO::toJSON(req)
# Response gatherer
h = RCurl::basicTextGatherer()
h$reset()
# API call
RCurl::httpPUT(url = sprintf(publishURL, wkID, wsID),
httpheader=c('Authorization' = paste('Bearer', authToken, sep=' '),
'Content-Type' = 'application/json',
'Accept' = 'application/json'),
content = body,
writefunction = h$update)
# Format output
updatedService <- RJSONIO::fromJSON(h$value())
# Use discovery functions to get default endpoint for immediate use
# NOTE: switch from internal URL for production
endpoints <- getEndpoints(wkID, authToken, newService["Id"], internalURL)
for (i in 1:length(endpoints)) {
endpoints[[i]]$ApiLocation <- paste(endpoints[[i]]$ApiLocation, "/execute?api-version=2.0&details=true",sep="")
}
# currently returning list of webservice details (as a list) and endpoint details (as a list) in that order
return(list("serviceDetails"=updatedService, "endpoints"=endpoints))
}
#############################################################
# API URLs
#############################################################
wsURL = "https://management-tm.azureml.net/workspaces/%s/webservices"
wsURLdet = "https://management-tm.azureml.net/workspaces/%s/webservices/%s"
epURL = "https://management-tm.azureml.net/workspaces/%s/webservices/%s/endpoints"
epURLdet = "https://management-tm.azureml.net/workspaces/%s/webservices/%s/endpoints/%s"
# remove in real version
testURL = "https://hiteshsm.cloudapp.net/workspaces/%s/webservices/%s/endpoints"
internalURL = "https://management.azureml-int.net/workspaces/%s/webservices/%s/endpoints"
#############################################################
#' @title Get FrameWork
#' @description
#' Framework for making an HTTP request to the URL specified
#' returns a list of lists, so that the elements can be accessed
#' via double bracket notation
#' @param tUrl The URL from the published web service
#' @param authToken The authentication token for the AzureML account being used
#' @return prints the framework
#' @examples
#' results[[1]]
#############################################################
getFramework <- function(tUrl, authToken) {
# Collectors for API response
h = RCurl::basicTextGatherer()
hdr = RCurl::basicTextGatherer()
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
# Craft request header and execute
auth = paste('Bearer', authToken, sep=' ')
h$reset()
RCurl::curlPerform(url = tUrl,
httpheader=c('Authorization' = auth, 'Content-Type' = "application/json", 'Accept' = "application/json"),
writefunction = h$update,
headerfunction = hdr$update,
verbose = TRUE,
ssl.verifyHost = FALSE,
ssl.verifyPeer = FALSE)
# Print results
return(RJSONIO::fromJSON(h$value()))
}
#############################################################
#' @title Get Web Services
#' @description Get a list of webservices available to a workspace
#'
#' @param wkID The workspace ID
#' @param authToken The primary authorization token
#' @return Returns a list of lists, where each web service is represented
#' as a nested named list with the following fields:
#' "Id", "Name", "Description", "CreationTime", "WorkspaceId", "DefaultEndpointName"
#' @examples
#' DELETE TOKENS IN REAL VERSION
#' services = getWebServices("c01fb89129aa4ef0a19affa7f95ecbbc", "523709d06661441bbf129d68f84cd6a4")
#' serviceID = services[[1]]["Id"]
#############################################################
getWebServices <- function(wkID, authToken, url=wsURL) {
return(getFramework(sprintf(url, wkID), authToken))
}
#############################################################
#' @title Get Workspace Details
#' @description Get detailed information about a specific webservice
#'
#' @param wkID The workspace ID
#' @param authToken The primary authorization token
#' @param wsID The webservice ID
#' @return Returns a named list representing the web service
#' with the following fields:
#' "Id", "Name", "Description", "CreationTime", "WorkspaceId", "DefaultEndpointName"
#' @examples
#' << Please note that you will need to retrieve all of the signature details from your AzureML account >>
#' services = getWebServices("abcdefghijklmnopqrstuvwxyz123456", "abcdefghijklmnopqrstuvwxyz123456")
#############################################################
getWSDetails <- function(wkID, authToken, wsID, url=wsURLdet) {
return(getFramework(sprintf(url, wkID, wsID), authToken))
}
#############################################################
#' @title Get Endpoints
#' @description Get the endpoints that are part of a web service
#'
#' @param wkID The workspace ID
#' @param authToken The primary authorization token
#' @param wsID The webservice ID
#' @return Returns a list of lists, where each endpoint is represented
#' as a nested named list with the following fields:
#' "Name", "Description", "CreationTime", "WorkspaceId", "WebServiceId",
#' "HelpLocation", "PrimaryKey", "SecondaryKey", "ApiLocation", "Version",
#' "MaxConcurrentCalls", "DiagnosticsTraceLevel", "ThrottleLevel"
#' @examples
#' << Please note that you will need to retrieve all of the signature details from your AzureML account >>
#' endpoints = getEndpoints("abcdefghijklmnopqrstuvwxyz123456", "abcdefghijklmnopqrstuvwxyz123456", "abcdefghijklmnopqrstuvwxyz123456")
#############################################################
getEndpoints <- function(wkID, authToken, wsID, url=epURL) {
endpoints <- getFramework(sprintf(url, wkID, wsID), authToken)
for (i in 1:length(endpoints)) {
endpoints[[i]]$ApiLocation <- paste(endpoints[[i]]$ApiLocation, "/execute?api-version=2.0&details=true",sep="")
}
return(endpoints)
}
#############################################################
<<<<<<< HEAD
#' @title get EndPoint Details
#' @description Get the details on a specific endpoint
#'
#' @param wkID The workspace ID
#' @param authToken The primary authorization token
#' @param wsID The webservice ID
#' @param epID The endpoint name
#' @return Returns a named list representing the endpoint with the following fields:
#' "Name", "Description", "CreationTime", "WorkspaceId", "WebServiceId",
#' "HelpLocation", "PrimaryKey", "SecondaryKey", "ApiLocation", "Version",
#' "MaxConcurrentCalls", "DiagnosticsTraceLevel", "ThrottleLevel"
#' @examples
#' << Please note that you will need to retrieve all of the signature details from your AzureML account >>
#' defaultEP = getEPDetails("abcdefghijklmnopqrstuvwxyz123456", "abcdefghijklmnopqrstuvwxyz123456", "abcdefghijklmnopqrstuvwxyz123456", "default")
#############################################################
getEPDetails <- function(wkID, authToken, wsID, epID, url=epURLdet) {
endpoint <- getFramework(sprintf(url, wkID, wsID, epID), authToken)
endpoint$ApiLocation <- paste(endpoint$ApiLocation, "/execute?api-version=2.0&details=true",sep="")
}
endpoints <- getEndpoints(wsID, wsAuth, MSFTonline[[1]]$Id, url=internalURL)
endpoints
getEPDetails(wsID, wsAuth, MSFTonline[[1]]Id, "default", url=internalURL)
getEPDetails(wsID, wsAuth, MSFTonline[[1]]$Id, "default", url=internalURL)
getEPDetails <- function(wkID, authToken, wsID, epID, url=epURLdet) {
endpoint <- getFramework(sprintf(url, wkID, wsID, epID), authToken)
endpoint$ApiLocation <- paste(endpoint$ApiLocation, "/execute?api-version=2.0&details=true",sep="")
return(endpoint)
}
getEPDetails(wsID, wsAuth, MSFTonline[[1]]$Id, "default", url=internalURL)
getEPDetails <- function(wkID, authToken, wsID, epID, url=epURLdet) {
endpoint <- getFramework(sprintf(url, wkID, wsID, epID), authToken)
endpoint[[1]]$ApiLocation <- paste(endpoint[[1]]$ApiLocation, "/execute?api-version=2.0&details=true",sep="")
return(endpoint)
}
getEPDetails(wsID, wsAuth, MSFTonline[[1]]$Id, "default", url=internalURL)
add <- function (x, y) {
return(x + y)
}
getFunctionString(add)
add <- function (x, y) {
print("This will add x and y")
return(x + y)
}
getFunctionString(add)
=======
# API URLs
source('~/GitHub/Azure-MachineLearning-ClientLibrary-R/maml/R/discover.R', echo=TRUE)
source('~/GitHub/Azure-MachineLearning-ClientLibrary-R/maml/R/consume.R', echo=TRUE)
source('~/GitHub/Azure-MachineLearning-ClientLibrary-R/maml/R/consume.R', echo=TRUE)
install.packages("data.table")
source('~/GitHub/Azure-MachineLearning-ClientLibrary-R/maml/R/consume.R', echo=TRUE)
install.packages("df2json")
install.packages("httr")
source('~/GitHub/Azure-MachineLearning-ClientLibrary-R/maml/R/consume.R', echo=TRUE)
roxygen2::roxygenise()
roxygen2::roxygenise()
?serializeI
??serializeI
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
source('~/GitHub/Azure-MachineLearning-ClientLibrary-R/maml/R/discover.R', echo=TRUE)
roxygen2::roxygenise()
source('~/GitHub/Azure-MachineLearning-ClientLibrary-R/maml/R/discover.R', echo=TRUE)
roxygen2::roxygenise()
source('~/GitHub/Azure-MachineLearning-ClientLibrary-R/maml/R/discover.R', echo=TRUE)
roxygen2::roxygenise()
source('~/GitHub/Azure-MachineLearning-ClientLibrary-R/maml/R/discover.R', echo=TRUE)
roxygen2::roxygenise()
source('~/GitHub/Azure-MachineLearning-ClientLibrary-R/maml/R/discover.R', echo=TRUE)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
warnings()
source('~/GitHub/Azure-MachineLearning-ClientLibrary-R/maml/R/publish.R', echo=TRUE)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
>>>>>>> a8474fd93f6dfb00d91b912c12d964345d297367
extID = "bbc91d900c3546b695d6507867fc72ae"
extID = "c01fb89129aa4ef0a19affa7f95ecbb"
extAuth = "523709d06661441bbf129d68f84cd6a4"
getWebServices(extID, extAuth)
extID = "37310abb304e4f56bdb66d279477e0be"
extAuth = "ccfe0f6e9c684345a634bdae0b48c4e9"
getWebServices(extID, extAuth)
getFramework <- function(tUrl, authToken) {
# Collectors for API response
h = RCurl::basicTextGatherer()
hdr = RCurl::basicTextGatherer()
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
# Craft request header and execute
auth = paste('Bearer', authToken, sep=' ')
h$reset()
RCurl::curlPerform(url = tUrl,
httpheader=c('Authorization' = auth, 'Content-Type' = "application/json", 'Accept' = "application/json"),
writefunction = h$update,
headerfunction = hdr$update,
verbose = TRUE,
ssl.verifyHost = FALSE,
ssl.verifyPeer = FALSE)
# Print results
#return(RJSONIO::fromJSON(h$value()))
return(h$value)
}
getWebServices(extID, extAuth)
getFramework <- function(tUrl, authToken) {
# Collectors for API response
h = RCurl::basicTextGatherer()
hdr = RCurl::basicTextGatherer()
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
# Craft request header and execute
auth = paste('Bearer', authToken, sep=' ')
h$reset()
RCurl::curlPerform(url = tUrl,
httpheader=c('Authorization' = auth, 'Content-Type' = "application/json", 'Accept' = "application/json"),
writefunction = h$update,
headerfunction = hdr$update,
verbose = TRUE,
ssl.verifyHost = FALSE,
ssl.verifyPeer = FALSE)
# Print results
#return(RJSONIO::fromJSON(h$value()))
return(h$value())
}
getWebServices(extID, extAuth)
getFramework <- function(tUrl, authToken) {
# Collectors for API response
h = RCurl::basicTextGatherer()
hdr = RCurl::basicTextGatherer()
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
# Craft request header and execute
auth = paste('Bearer', authToken, sep=' ')
h$reset()
RCurl::curlPerform(url = tUrl,
httpheader=c('Authorization' = auth, 'Content-Type' = "application/json", 'Accept' = "application/json"),
writefunction = h$update,
headerfunction = hdr$update,
verbose = TRUE,
ssl.verifyHost = FALSE,
ssl.verifyPeer = FALSE)
# Print results
#return(RJSONIO::fromJSON(h$value()))
return(hdr$value())
}
getWebServices(extID, extAuth)
wsURL = "https://management-tm.azureml.net/workspaces/%s/webservices"
wsURLdet = "https://management-tm.azureml.net/workspaces/%s/webservices/%s"
epURL = "https://management-tm.azureml.net/workspaces/%s/webservices/%s/endpoints"
epURLdet = "https://management-tm.azureml.net/workspaces/%s/webservices/%s/endpoints/%s"
getWebServices(extID, extAuth)
getWebServices(wsID, wsAuth, url=internalURL)
getWebServices(wsID, wsAuth, url=internalURL)
getWebServices <- function(wkID, authToken, url=wsURL) {
return(getFramework(sprintf(paste(url,"/workspaces/%s/webservices",sep=""), wkID), authToken))
}
internalURL = "https://management.azureml-int.net"
getWebServices(wsID, wsAuth, url=internalURL)
getFramework <- function(tUrl, authToken) {
# Collectors for API response
h = RCurl::basicTextGatherer()
hdr = RCurl::basicTextGatherer()
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
# Craft request header and execute
auth = paste('Bearer', authToken, sep=' ')
h$reset()
RCurl::curlPerform(url = tUrl,
httpheader=c('Authorization' = auth, 'Content-Type' = "application/json", 'Accept' = "application/json"),
writefunction = h$update,
headerfunction = hdr$update,
verbose = TRUE,
ssl.verifyHost = FALSE,
ssl.verifyPeer = FALSE)
# Print results
return(RJSONIO::fromJSON(h$value()))
}
getFramework <- function(tUrl, authToken) {
# Collectors for API response
h = RCurl::basicTextGatherer()
hdr = RCurl::basicTextGatherer()
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
# Craft request header and execute
auth = paste('Bearer', authToken, sep=' ')
h$reset()
RCurl::curlPerform(url = tUrl,
httpheader=c('Authorization' = auth, 'Content-Type' = "application/json", 'Accept' = "application/json"),
writefunction = h$update,
headerfunction = hdr$update,
verbose = TRUE,
ssl.verifyHost = FALSE,
ssl.verifyPeer = FALSE)
# Print results
# Error handle response not long enough (no webservices)
return(RJSONIO::fromJSON(h$value()))
}
getWebServices(wsID, wsAuth, url=internalURL)
getWebServices(wsID, wsAuth, url=internalURL)
prodURL = "https://management-tm.azureml.net"
getWebServices <- function(wkID, authToken, url=prodURL) {
return(getFramework(sprintf(paste(url,"/workspaces/%s/webservices",sep=""), wkID), authToken))
}
getWebServices(extID, extAuth)
getFramework <- function(tUrl, authToken) {
# Collectors for API response
h = RCurl::basicTextGatherer()
hdr = RCurl::basicTextGatherer()
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
# Craft request header and execute
auth = paste('Bearer', authToken, sep=' ')
h$reset()
RCurl::curlPerform(url = tUrl,
httpheader=c('Authorization' = auth, 'Content-Type' = "application/json", 'Accept' = "application/json"),
writefunction = h$update,
headerfunction = hdr$update,
verbose = TRUE,
ssl.verifyHost = FALSE,
ssl.verifyPeer = FALSE)
# Print results
# Error handle response not long enough (no webservices)
print(h$value())
}
getWebServices(extID, extAuth)
getFramework <- function(tUrl, authToken) {
# Collectors for API response
h = RCurl::basicTextGatherer()
hdr = RCurl::basicTextGatherer()
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
# Craft request header and execute
auth = paste('Bearer', authToken, sep=' ')
h$reset()
RCurl::curlPerform(url = tUrl,
httpheader=c('Authorization' = auth, 'Content-Type' = "application/json", 'Accept' = "application/json"),
writefunction = h$update,
headerfunction = hdr$update,
verbose = TRUE,
ssl.verifyHost = FALSE,
ssl.verifyPeer = FALSE)
# Print results
# Error handle response not long enough (no webservices)
if (h$value() == "") {
return(-1)
}
return(RJSONIO::fromJSON(h$value()))
}
getWebServices(extID, extAuth)
getWebServices(extID, extAuth)
testID = "37310abb304e4f56bdb66d279477e0be"
testAuth = "ccfe0f6e9c684345a634bdae0b48c4e9"
webservices = getWebServices(testID, testAuth)
testWS = getWSDetails(testID, testAuth, webservices[[1]]$Id)
testWS
endpoints = getEndpoints(testID, testAuth, testWS$Id)
endpoints
length(testWS)
length(testEP)
testEP = getEPDetails(testID, testAuth, testWS$Id, endpoints[[1]]$Name)
testEP = getEPDetails(testID, testAuth, testWS$Id, endpoints$Name)
getEndpoints <- function(wkID, authToken, wsID, url=prodURL) {
endpoints <- getFramework(sprintf(paste(url, "/workspaces/%s/webservices/%s/endpoints", sep=""), wkID, wsID), authToken)
# for convenience because by default the repsonse doesn't include the full API location
for (i in 1:length(endpoints)) {
endpoints[[i]]$ApiLocation <- paste(endpoints[[i]]$ApiLocation, "/execute?api-version=2.0&details=true",sep="")
}
return(endpoints)
}
#############################################################
#' @title get Endpoint Details
#' @description Get the details on a specific endpoint
#'
#' @param wkID The workspace ID
#' @param authToken The primary authorization token
#' @param wsID The webservice ID
#' @param epName The endpoint name
#' @return Returns a named list representing the endpoint with the following fields:
#' "Name", "Description", "CreationTime", "WorkspaceId", "WebServiceId",
#' "HelpLocation", "PrimaryKey", "SecondaryKey", "ApiLocation", "Version",
#' "MaxConcurrentCalls", "DiagnosticsTraceLevel", "ThrottleLevel"
#' @examples
#' << Please note that you will need to retrieve all of the signature details from your AzureML account >>
#' defaultEP = getEPDetails("abcdefghijklmnopqrstuvwxyz123456", "abcdefghijklmnopqrstuvwxyz123456", "abcdefghijklmnopqrstuvwxyz123456", "default")
#############################################################
getEPDetails <- function(wkID, authToken, wsID, epName, url=prodURL) {
endpoint <- getFramework(sprintf(paste(url, "/workspaces/%s/webservices/%s/endpoints/%s", sep=""), wkID, wsID, epName), authToken)
# for convenience because by default the repsonse doesn't include the full API location
endpoint[[1]]$ApiLocation <- paste(endpoint[[1]]$ApiLocation, "/execute?api-version=2.0&details=true",sep="")
return(endpoint)
}
endpoints = getEndpoints(testID, testAuth, testWS$Id)
testEP = getEPDetails(testID, testAuth, testWS$Id, endpoints$Name)
endpoints = getEndpoints(testID, testAuth, testWS$Id)
testEP = getEPDetails(testID, testAuth, testWS$Id, "default")
getEPDetails <- function(wkID, authToken, wsID, epName, url=prodURL) {
endpoint <- getFramework(sprintf(paste(url, "/workspaces/%s/webservices/%s/endpoints/%s", sep=""), wkID, wsID, epName), authToken)
# for convenience because by default the repsonse doesn't include the full API location
endpoint$ApiLocation <- paste(endpoint$ApiLocation, "/execute?api-version=2.0&details=true",sep="")
return(endpoint)
}
testEP = getEPDetails(testID, testAuth, testWS$Id, endpoints$Name)
getEPDetails <- function(wkID, authToken, wsID, epName, url=prodURL) {
print(sprintf(paste(url, "/workspaces/%s/webservices/%s/endpoints/%s", sep=""), wkID, wsID, epName))
endpoint <- getFramework(sprintf(paste(url, "/workspaces/%s/webservices/%s/endpoints/%s", sep=""), wkID, wsID, epName), authToken)
# for convenience because by default the repsonse doesn't include the full API location
endpoint$ApiLocation <- paste(endpoint$ApiLocation, "/execute?api-version=2.0&details=true",sep="")
return(endpoint)
}
testEP = getEPDetails(testID, testAuth, testWS$Id, endpoints$Name)
getEPDetails <- function(wkID, authToken, wsID, epName, url=prodURL) {
sprintf(paste(url, "/workspaces/%s/webservices/%s/endpoints/%s", sep=""), wkID, wsID, epName)
endpoint <- getFramework(sprintf(paste(url, "/workspaces/%s/webservices/%s/endpoints/%s", sep=""), wkID, wsID, epName), authToken)
# for convenience because by default the repsonse doesn't include the full API location
endpoint$ApiLocation <- paste(endpoint$ApiLocation, "/execute?api-version=2.0&details=true",sep="")
return(endpoint)
}
testEP = getEPDetails(testID, testAuth, testWS$Id, endpoints$Name)
endpoints
testEP = getEPDetails(testID, testAuth, testWS$Id, endpoints$Name)
paste(prodURL, "/workspaces/%s/webservices/%s/endpoints/%s", sep=""))
paste(prodURL, "/workspaces/%s/webservices/%s/endpoints/%s", sep="")
sprintf(paste(url, "/workspaces/%s/webservices/%s/endpoints/%s", sep=""), testID, testWS$Id, "default")
sprintf(paste(prodUrl, "/workspaces/%s/webservices/%s/endpoints/%s", sep=""), testID, testWS$Id, "default")
sprintf(paste(prodURL, "/workspaces/%s/webservices/%s/endpoints/%s", sep=""), testID, testWS$Id, "default")
sprintf(paste(prodURL, "/workspaces/%s/webservices/%s/endpoints/%s", sep=""), testID, testWS$Id, endpoints[[1]]$Name)
testEP = getEPDetails(testID, testAuth, testWS$Id, endpoints[[1]]$Name)
testEP
length(testEP)
