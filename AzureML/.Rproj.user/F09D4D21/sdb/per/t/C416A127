{
    "contents" : "\n# testConsumeDF <- consumeDataframe(\"Hv5kVkT5Lt6stj+jqGVE836j2E2VTkhPo3Sb0h/J7ulxWeU/MMNqE5O08shGqLwuaZRIfZmPdlrQC+2IANxp6w==\",\"https://requestresponse001.cloudapp.net/workspaces/0f2adea9926a4e7c9a636a39f2026fa0/services/1a11ca46456a428a92f57638d20a72f9/execute?api-version=2.0&details=true\",dataframe)\n\n\ntesting <- publishWebService(\"add\", \"e2eTest2\", list(\"icol1\"=\"int\"), list(\"ocol1\"=\"int\"), wsID, auth)\nendpoint <- getEndpointsT(wsID, auth, testing[\"Id\"])\nconsumeSingleRequest(endpoint[[1]][\"PrimaryKey\"], paste(endpoint[[1]][\"ApiLocation\"],\"/execute?api-version=2.0&details=true\",sep=\"\"), list(\"icol1\"), list(1))\n\nwrapper <- \"inputDF <- maml.mapInputPort(1)\\r\\noutputDF <- matrix(ncol = %s, nrow = nrow(inputDF))\\r\\ncolnames(outputDF) <- %s\\r\\noutputDF <- data.frame(outputDF)\\r\\nfor (file in list.files(\\\"src\\\")) {\\r\\n  if (file == \\\"%s\\\") {\\r\\n    load(\\\"src/%s\\\")\\r\\n    for (item in names(dependencies)) {\\r\\n      assign(item, dependencies[[item]])\\r\\n    }\\r\\n  }\\r\\n  else {\\r\\n    if (!(file %%in%% installed.packages()[,\\\"Package\\\"])) {\\r\\n      install.packages(paste(\\\"src\\\", file, sep=\\\"/\\\"), lib=\\\".\\\", repos=NULL, verbose=TRUE)\\r\\n    }\\r\\n    library(strsplit(file, \\\"\\\\\\\\.\\\")[[1]][[1]], character.only=TRUE)\\r\\n  }\\r\\n}\\r\\naction <- %s\\r\\n  for (i in 1:nrow(inputDF)) {\\r\\n    outputDF[i,] <- do.call(\\\"action\\\", as.list(inputDF[i,]))\\r\\n  }\\r\\nmaml.mapOutputPort(\\\"outputDF\\\")\"\n\n# No zip file / opening of dependencies\n\"inputDF <- maml.mapInputPort(1)\\r\\noutputDF <- data.frame(matrix(ncol = %s, nrow = nrow(inputDF)))\\r\\naction <- %s\\r\\n  for (i in 1:nrow(inputDF)) {\\r\\n    outputDF[i,] <- do.call(\\\"action\\\", as.list(inputDF[i,]))\\r\\n  }\\r\\nmaml.mapOutputPort(\\\"outputDF\\\")\"\n\n# viewing contents of /src/\n\"outputDF <- data.frame(list.files(\\\"src\\\"))\\r\\nmaml.mapOutputPort(\\\"outputDF\\\")\"\n\"inputDF <- maml.mapInputPort(1)\\r\\noutputDF <- data.frame(list.files(\\\"src\\\")\\r\\nmaml.mapOutputPort(\\\"outputDF\\\")\"\n\n#Testing consumption functions\n#api keys\n#setwd(\"C:/Users/t-ritra/Documents/Datasets\")\ndataframe <- read.csv(\"forestfires.csv\")\nservices = getWebServices(\"b2dcb353526144ab835d88a4e48e99f5\",\"c87ef875171c418da034400d8a957d59\")\nserviceID = services[[1]][\"Id\"]\nendpoints = getEndpoints(\"b2dcb353526144ab835d88a4e48e99f5\",\"c87ef875171c418da034400d8a957d59\", serviceID)\ntestDiscoverSchema <- discoverSchema(endpoints[[1]]$HelpLocation)\n#testconsumeSingleDT <- consumeSingleRows(\"Hv5kVkT5Lt6stj+jqGVE836j2E2VTkhPo3Sb0h/J7ulxWeU/MMNqE5O08shGqLwuaZRIfZmPdlrQC+2IANxp6w==\",\"https://requestresponse001.cloudapp.net/workspaces/0f2adea9926a4e7c9a636a39f2026fa0/services/1a11ca46456a428a92f57638d20a72f9/execute?api-version=2.0&details=true&format=swagger\",list( \"X\",\"Y\",\"month\",\"day\",\"FFMC\",\"DMC\",\"DC\",\"ISI\",\"temp\",\"RH\",\"wind\",\"rain\",\"area\"),list(\"0\",\"0\",\"jan\",\"mon\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"))\ntestconsumeSingleDT <- consumeSingleRows(endpoints[[1]]$PrimaryKey,testDiscoverSchema[[\"requestUrlDataTable\"]],testDiscoverSchema[[\"columnNames\"]],list(\"0\",\"0\",\"jan\",\"mon\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"))\n#testConsumeFile <- consumeFile(\"Hv5kVkT5Lt6stj+jqGVE836j2E2VTkhPo3Sb0h/J7ulxWeU/MMNqE5O08shGqLwuaZRIfZmPdlrQC+2IANxp6w==\",\"https://requestresponse001.cloudapp.net/workspaces/0f2adea9926a4e7c9a636a39f2026fa0/services/1a11ca46456a428a92f57638d20a72f9/execute?api-version=2.0&details=true&format=swagger\",\"forestfires.csv\")\ntestConsumeFile <- consumeFile(endpoints[[1]]$PrimaryKey,testDiscoverSchema[[\"requestUrl\"]],\"forestfires.csv\")\n#testConsumeDF <- consumeDataframe(\"Hv5kVkT5Lt6stj+jqGVE836j2E2VTkhPo3Sb0h/J7ulxWeU/MMNqE5O08shGqLwuaZRIfZmPdlrQC+2IANxp6w==\",\"https://requestresponse001.cloudapp.net/workspaces/0f2adea9926a4e7c9a636a39f2026fa0/services/1a11ca46456a428a92f57638d20a72f9/execute?api-version=2.0&details=true&format=swagger\",dataframe)\ntestConsumeDF <- consumeDataframe(endpoints[[1]]$PrimaryKey,testDiscoverSchema[[\"requestUrl\"]],dataframe)\n#testconsumeSingle <- consumeLists(\"Hv5kVkT5Lt6stj+jqGVE836j2E2VTkhPo3Sb0h/J7ulxWeU/MMNqE5O08shGqLwuaZRIfZmPdlrQC+2IANxp6w==\",\"https://requestresponse001.cloudapp.net/workspaces/0f2adea9926a4e7c9a636a39f2026fa0/services/1a11ca46456a428a92f57638d20a72f9/execute?api-version=2.0&details=true&format=swagger\",list( \"X\" = 0,\"Y\" = 0,\"month\" = \"jan\",\"day\" = \"mon\",\"FFMC\" = 0,\"DMC\" = 0,\"DC\" = 0,\"ISI\" = 0,\"temp\" = 0,\"RH\" = 0,\"wind\"=0,\"rain\" = 0,\"area\" = 0))\ntestconsumeSingle <- consumeLists(endpoints[[1]]$PrimaryKey,testDiscoverSchema[[\"requestUrl\"]],testDiscoverSchema[[\"sampleInput\"]])\n\n##################################################################################\n# WRAPPER TESTING\n# Consider: assert statements (stopifnot), error handling\n# wrap in a function that will return a string with the proper function\n##################################################################################\n# get the input\ninputDF <- maml.mapInputPort(1)\n\n# initialize an empty output dataframe of desired dimensions\n#outputDF <- data.frame(matrix(ncol = \"%s\", nrow = nrow(inputDF)))\noutputDF <- matrix(ncol = \"%s\", nrow=nrow(inputDF))\ncolnames(outputDF) <- \"%s\"\noutputDF <- data.frame(outputDF)\n\nfor (file in list.files(\"src\")) {\n  if (file == \"%s\") {\n    load(\"src/%s\")\n    # assert that dependencies exists?\n    # NOTE: depedencies object comes from packDependencies(), maybe something more unique to avoid collisions?\n    for (item in names(dependencies)) {\n      assign(item, dependencies[[item]])\n    }\n  }\n  else {\n    # if the package isn't installed on Azure already, install it and its dependencies\n    # need to recursively grab dependencies\n    if (!(file %in% installed.packages()[,\"Package\"])) {\n      install.packages(paste(\"src\", file, sep=\"/\"), lib= \".\", repos=NULL, verbose=TRUE)\n    }\n    # load the package\n    library(strsplit(file, \"\\\\.\")[[1]][[1]], character.only=TRUE)\n  }\n}\n\n# user function\naction <-\n  \n  # apply function to every row\n  for (i in 1:nrow(inputDF)) {\n    outputDF[i,] <- do.call(\"action\", as.list(inputDF[i,]))\n  }\n\n# return output\nmaml.mapOutputPort(\"outputDF\")\n\n# test function\nadd <- function(x) {\n  print(findGlobals(add))\n  return(add2(x))\n}\n\nadd2 <- function(x) {\n  print(toJSON(list(\"test\")))\n  return(x+a[[1]])\n}\n\ntestService <- publishWebService(\"add\", \"addTest\", list(\"out\"=\"float\"), list(\"in\"=\"float\"), wsID, wsAuth)\ntestEndpoints <- testService[[2]]\nresponse <- consumeSingleRows(testEndpoints[[1]][\"PrimaryKey\"], paste(testEndpoints[[1]][\"ApiLocation\"], \"/execute?api-version=2.0&details=true\",sep=\"\"), list(\"out\"), list(\"1\"), list(\"2\"), list(\"3\"))\n\ntestModel <- function(Pclass, Sex, Age, SibSp, Parch, Fare) {\n  class(GBM.model)\n  return(list(Pclass, Sex, Age, SibSp, Parch, Fare))\n}\nTitanicTest <- publishWebService(\"testModel\", \"TestingModel7-13\", list(\"Pclass\"=\"string\", \"Sex\"=\"string\", \"Age\"=\"int\", \"SibSp\"=\"int\", \"Parch\"=\"int\", \"Fare\"=\"float\"), list(\"Pclass\"=\"string\", \"Sex\"=\"string\", \"Age\"=\"int\", \"SibSp\"=\"int\", \"Parch\"=\"int\", \"Fare\"=\"float\"), wsID, wsAuth)\ntestEndpoints <- TitanicTest[[2]]\nresponse3 <- consumeSingleRows(endpoints[[1]][\"PrimaryKey\"], paste(endpoints[[1]][\"ApiLocation\"], \"/execute?api-version=2.0&details=true\",sep=\"\"), list(\"Pclass\", \"Sex\", \"Age\", \"SibSp\", \"Parch\", \"Fare\"), list(1, \"male\", \"20\", \"2\", \"0\", 8.50))\n",
    "created" : 1438987204162.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "773608725",
    "id" : "C416A127",
    "lastKnownWriteTime" : 1438892966,
    "path" : "~/Azure-MachineLearning-ClientLibrary-R/examples/testing.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 9,
    "source_on_save" : false,
    "type" : "r_source"
}