{
    "contents" : "# API URLs ----------------------------------------------------------------\n\nprodURL = \"https://management-tm.azureml.net\"\n\n# Functions ---------------------------------------------------------------\n\n#' Abstraction for making GET requests.\n#'\n#' Framework for making GET requests to the Azure management APIs.\n#'\n#' @param tUrl the API URL\n#' @param authToken the authentication token\n#'\n#' @return the response as a named list\n#'\n#' @family discovery functions\n#' @keywords internal\ngetFramework <- function(tUrl, authToken) {\n  # Collectors for API response\n  h = RCurl::basicTextGatherer()\n  hdr = RCurl::basicTextGatherer()\n\n  # Accept SSL certificates issued by public Certificate Authorities\n  options(RCurlOptions = list(cainfo = system.file(\"CurlSSL\", \"cacert.pem\", package = \"RCurl\")))\n\n  # Craft request header and execute\n  auth = paste('Bearer', authToken, sep=' ')\n  h$reset()\n  RCurl::curlPerform(url = tUrl,\n              httpheader=c('Authorization' = auth, 'Content-Type' = \"application/json\", 'Accept' = \"application/json\"),\n              writefunction = h$update,\n              headerfunction = hdr$update,\n              verbose = TRUE)\n\n  # Error handle response not long enough (no webservices)\n  if (h$value() == \"\") {\n    return(-1)\n  }\n  response = rjson::fromJSON(h$value())\n  # Error handling\n  if ('error' %in% names(response)) {\n    stop(response$error)\n  }\n\n  return(response)\n}\n\n\n\n#' Get Available Web Services.\n#'\n#' Get a list of webservices available to the Microsoft Azure Machine Learning workspace specified by the workspace ID.\n#'\n#' @export\n#'\n#' @param wkID workspace ID\n#' @param authToken primary authorization token\n#' @param url the API url to make the call to, by default hits the Azure management API\n#'\n#' @return Returns a list of lists, where each web service is represented as a nested named list with the following fields:\n#'\n#' \\itemize{\n#'   \\item Id\n#'   \\item Name\n#'   \\item Description\n#'   \\item CreationTime\n#'   \\item WorkspaceId\n#'   \\item DefaultEndpointName\n#' }\n#'\n#' @family discovery functions\n#'\n#' @examples\n#' \\dontrun{\n#' services = getWebServices(\"wsID\", \"authToken\")\n#' serviceID = services[[1]][\"Id\"]\n#' }\ngetWebServices <- function(wkID, authToken, url=prodURL) {\n  response = getFramework(sprintf(paste(url,\"/workspaces/%s/webservices\",sep=\"\"), wkID), authToken)\n  if (!is.list(response)) {\n    stop(\"No web services found\", call. = TRUE)\n  }\n  return(response)\n}\n\n\n\n#' Get Web Service Details.\n#'\n#' Get detailed information about a specific Microsoft Azure Machine Learning web service specified by the web service ID.\n#'\n#' @export\n#'\n#' @inheritParams getWebServices\n#' @param wsID the web service ID\n#'\n#' @return Returns a list with the following fields:\n#'\n#' \\itemize{\n#'   \\item Id\n#'   \\item Name\n#'   \\item Description\n#'   \\item CreationTime\n#'   \\item WorkspaceId\n#'   \\item DefaultEndpointName\n#' }\n#'\n#' @family discovery functions\ngetWSDetails <- function(wkID, authToken, wsID, url=prodURL) {\n  return(getFramework(sprintf(paste(url, \"/workspaces/%s/webservices/%s\", sep=\"\"), wkID, wsID), authToken))\n}\n\n\n\n#' Get Web Service Endpoints.\n#'\n#' Get the API endpoints that belong to a Microsoft Azure Machine Learning web service.\n#'\n#' @export\n#'\n#' @inheritParams getWSDetails\n#'\n#' @return Returns a list of lists, where each endpoint is represented\n#' as a nested named list with the following fields:\n#'\n#' \\itemize{\n#'  \\item Name\n#'  \\item Description\n#'  \\item CreationTime\n#'  \\item WorkspaceId\n#'  \\item WebServiceId\n#'  \\item HelpLocation\n#'  \\item PrimaryKey\n#'  \\item SecondaryKey\n#'  \\item ApiLocation\n#'  \\item Version\n#'  \\item MaxConcurrentCalls\n#'  \\item DiagnosticsTraceLevel\n#'  \\item ThrottleLevel\n#'  }\n#'\n#' @family discovery functions\n#'\n#' @examples\n#' \\dontrun{\n#' endpoints <- getEndpoints(\"wkId\", \"authToken\", \"wsID\")\n#' helpURL <- endpoints[[1]]$HelpLocation\n#' pKey <- endpoints[[1]]$PrimaryKey\n#' apiURL <- endpoints[[1]]$ApiLocation\n#' }\ngetEndpoints <- function(wkID, authToken, wsID, url=prodURL) {\n  response <- getFramework(sprintf(paste(url, \"/workspaces/%s/webservices/%s/endpoints\", sep=\"\"), wkID, wsID), authToken)\n  # for convenience because by default the repsonse doesn't include the full API location\n  for (i in 1:length(response)) {\n    response[[i]]$ApiLocation <- paste(response[[i]]$ApiLocation, \"/execute?api-version=2.0&details=true&format=swagger\",sep=\"\")\n  }\n  return(response)\n}\n\n\n\n#' Get Endpoint Details.\n#'\n#' Get detailed information about a specific endpoint for a web service specified by the web service ID\n#'\n#' @export\n#'\n#' @inheritParams getWSDetails\n#' @param epName endpoint name\n#'\n#' @return Returns a list with the following fields:\n#'\n#' \\itemize{\n#'  \\item Name\n#'  \\item Description\n#'  \\item CreationTime\n#'  \\item WorkspaceId\n#'  \\item WebServiceId\n#'  \\item HelpLocation\n#'  \\item PrimaryKey\n#'  \\item SecondaryKey\n#'  \\item ApiLocation\n#'  \\item Version\n#'  \\item MaxConcurrentCalls\n#'  \\item DiagnosticsTraceLevel\n#'  \\item ThrottleLevel\n#'  }\n#'\n#' @family discovery functions\ngetEPDetails <- function(wkID, authToken, wsID, epName, url=prodURL) {\n  sprintf(paste(url, \"/workspaces/%s/webservices/%s/endpoints/%s\", sep=\"\"), wkID, wsID, epName)\n  endpoint <- getFramework(sprintf(paste(url, \"/workspaces/%s/webservices/%s/endpoints/%s\", sep=\"\"), wkID, wsID, epName), authToken)\n  # for convenience because by default the repsonse doesn't include the full API location\n  endpoint$ApiLocation <- paste(endpoint$ApiLocation, \"/execute?api-version=2.0&details=true&format=swagger\",sep=\"\")\n  return(endpoint)\n}\n",
    "created" : 1438884244732.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1358095808",
    "id" : "192607B5",
    "lastKnownWriteTime" : 1438988368,
    "path" : "~/Azure-MachineLearning-ClientLibrary-R/AzureML/R/discover.R",
    "project_path" : "R/discover.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}